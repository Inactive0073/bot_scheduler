"""init

Revision ID: 60aab29409eb
Revises:
Create Date: 2025-05-19 10:20:25.530344

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "60aab29409eb"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "channels",
        sa.Column("channel_id", sa.BigInteger(), nullable=False),
        sa.Column("channel_name", sa.String(), nullable=False),
        sa.Column("channel_link", sa.String(), nullable=False),
        sa.Column("channel_username", sa.String(), nullable=False),
        sa.Column("channel_caption", sa.String(), nullable=True),
        sa.Column("channel_auto_caption", sa.Boolean(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("channel_id"),
    )
    op.create_table(
        "customers",
        sa.Column("gender", sa.String(length=1), nullable=True),
        sa.Column(
            "percent_cashback",
            sa.SmallInteger(),
            server_default=sa.text("3"),
            nullable=False,
        ),
        sa.Column(
            "visits_per_year",
            sa.SmallInteger(),
            server_default=sa.text("0"),
            nullable=False,
        ),
        sa.Column(
            "visits", sa.SmallInteger(), server_default=sa.text("0"), nullable=False
        ),
        sa.Column("qr_code_file_id", sa.String(), nullable=True),
        sa.Column("qr_code_token", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column("phone", sa.String(length=18), nullable=True),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("username", sa.String(), nullable=True),
        sa.Column("last_name", sa.String(), nullable=True),
        sa.Column("i_name", sa.String(), nullable=True),
        sa.Column("i_surname", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("birthday", sa.String(length=10), nullable=True),
        sa.PrimaryKeyConstraint("telegram_id"),
        sa.UniqueConstraint("phone"),
        sa.UniqueConstraint("telegram_id"),
    )
    op.create_table(
        "roles",
        sa.Column("role_id", sa.SmallInteger(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("role_id"),
        sa.UniqueConstraint("name"),
    )
    op.execute("""
        INSERT INTO roles (name) VALUES 
            ('waiter'), 
            ('manager'), 
            ('admin'), 
            ('owner');
    """)  # Заполнение дефолтных ролей в таблице (waiter, manager, admin, owner)

    op.create_table(
        "users",
        sa.Column(
            "timezone_offset",
            sa.SmallInteger(),
            server_default=sa.text("3"),
            nullable=True,
        ),
        sa.Column("timezone", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column("phone", sa.String(length=18), nullable=True),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("username", sa.String(), nullable=True),
        sa.Column("last_name", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("telegram_id"),
        sa.UniqueConstraint("phone"),
        sa.UniqueConstraint("telegram_id"),
    )
    op.create_table(
        "bonuses",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("customer_id", sa.BigInteger(), nullable=False),
        sa.Column("amount", sa.Integer(), server_default=sa.text("0"), nullable=False),
        sa.Column("expire_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "source_type",
            sa.String(),
            server_default=sa.text("'cashback'"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["customer_id"], ["customers.telegram_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "schedule_posts",
        sa.Column("schedule_id", sa.BigInteger(), nullable=False),
        sa.Column("target_type", sa.String(), nullable=False),
        sa.Column("scheduled_time", sa.DateTime(), nullable=False),
        sa.Column("data_json", sa.JSON(), nullable=True),
        sa.Column("post_message", sa.Text(), nullable=False),
        sa.Column("author_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["author_id"], ["users.telegram_id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("schedule_id"),
        sa.UniqueConstraint("schedule_id"),
    )
    op.create_table(
        "user_channels",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("channel_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["channel_id"], ["channels.channel_id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.telegram_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_roles",
        sa.Column("id", sa.SmallInteger(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("role_id", sa.SmallInteger(), nullable=False),
        sa.ForeignKeyConstraint(["role_id"], ["roles.role_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.telegram_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_roles")
    op.drop_table("user_channels")
    op.drop_table("schedule_posts")
    op.drop_table("bonuses")
    op.drop_table("users")
    op.drop_table("roles")
    op.drop_table("customers")
    op.drop_table("channels")
    # ### end Alembic commands ###
