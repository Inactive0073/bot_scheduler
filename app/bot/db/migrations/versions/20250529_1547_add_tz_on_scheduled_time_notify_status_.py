"""add tz on scheduled_time, notify status columns

Revision ID: 4f5c6822a753
Revises: 245a9787de05
Create Date: 2025-05-29 15:47:26.569992

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4f5c6822a753'
down_revision: Union[str, None] = '245a9787de05'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('schedule_posts', sa.Column('notify_status', sa.Text(), server_default='scheduled', nullable=False))
    op.alter_column('schedule_posts', 'scheduled_time',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    # op.drop_constraint('uq_user_roles_user_id_role_id', 'user_roles', type_='unique')
    # op.create_unique_constraint('unique_user_role', 'user_roles', ['user_id', 'role_id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_constraint('unique_user_role', 'user_roles', type_='unique')
    # op.create_unique_constraint('uq_user_roles_user_id_role_id', 'user_roles', ['user_id', 'role_id'])
    op.alter_column('schedule_posts', 'scheduled_time',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('schedule_posts', 'notify_status')
    # ### end Alembic commands ###
